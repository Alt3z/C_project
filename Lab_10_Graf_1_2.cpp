#include <iostream>

using namespace std;

const int Vmax = 100, Emax = Vmax * 2;
int head[Vmax];
int next_el[Emax];
int t[Emax];
int k = 0;

void ADD(int v, int u)
{
    k = k + 1;
    t[k] = u;
    next_el[k] = head[v];
    head[v] = k;
}


void main()
{
    setlocale(LC_ALL, "RUS");

    int n1;
    cout << "Введите кол-во вершин: "; cin >> n1;

    int n2;
    cout << "Введите кол-во ребер: "; cin >> n2;

    int** m = new int* [n1];
    for (int i = 0; i < n1; i++) { m[i] = new int[n1]; }
    for (int i = 0; i < n1; i++) for (int j = 0; j < n1; j++) { m[i][j] = 0; }

    int u, v,orient;
    for (int i = 0; i < n2; i++)
    {
        cout <<endl <<"Введите смежные вершины: " << endl;
        cin >> v >> u;
        cout << "Если ребро ориентированное введите 1, иначе 0: "; cin >> orient;
        if (orient == 1)
        {
            ADD(v, u);
        }
        else 
        {
            ADD(v, u);
            ADD(u, v);
        }
    }

    cout << "Список смежности графа: ";
    for (int i = 0; i < n1 + 1; i++) 
    {
        int j = head[i];
        if (i) cout << i << "=>";
        while (j > 0) 
        {
            if (!next_el[j]) { cout << t[j]; }
            else { cout << t[j] << ", "; }
            j = next_el[j];
        }
        cout << endl;
    }

    for (int i = 0; i < n1 + 1; i++) //заполнение матрицы смежности из списка
    { 
        int j = head[i];
        while (j > 0) 
        {
            m[i - 1][t[j] - 1] = 1;
            j = next_el[j];
        }
    }

    cout << "     "; for (int i = 0; i < n1; i++) { cout << i + 1 << " "; }; cout << endl << endl; // вывод матрицы
    for (int i = 0; i < n1; i++)
    {
        cout << i + 1 << ".   ";
        for (int j = 0; j < n1; j++)
        {
            cout << m[i][j] << " ";
        }
        cout << endl;
    }
}


//Введите кол - во вершин : 6
//Введите кол - во ребер : 5
//
//Введите смежные вершины :
//3
//2
//Если ребро ориентированное введите 1, иначе 0 : 1
//
//Введите смежные вершины :
//2
//6
//Если ребро ориентированное введите 1, иначе 0 : 0
//
//Введите смежные вершины :
//3
//5
//Если ребро ориентированное введите 1, иначе 0 : 1
//
//Введите смежные вершины :
//5
//4
//Если ребро ориентированное введите 1, иначе 0 : 0
//
//Введите смежные вершины :
//5
//1
//Если ребро ориентированное введите 1, иначе 0 : 0
//Список смежности графа :
//1 = > 5
//2 = > 6
//3 = > 5, 2
//4 = > 5
//5 = > 1, 4
//6 = > 2
//1 2 3 4 5 6
//
//1.   0 0 0 0 1 0
//2.   0 0 0 0 0 1
//3.   0 1 0 0 1 0
//4.   0 0 0 0 1 0
//5.   1 0 0 1 0 0
//6.   0 1 0 0 0 0



//Введите кол - во вершин : 5
//Введите кол - во ребер : 5
//
//Введите смежные вершины :
//4
//1
//Если ребро ориентированное введите 1, иначе 0 : 0
//
//Введите смежные вершины :
//1
//2
//Если ребро ориентированное введите 1, иначе 0 : 0
//
//Введите смежные вершины :
//1
//3
//Если ребро ориентированное введите 1, иначе 0 : 0
//
//Введите смежные вершины :
//2
//3
//Если ребро ориентированное введите 1, иначе 0 : 0
//
//Введите смежные вершины :
//3
//5
//Если ребро ориентированное введите 1, иначе 0 : 0
//Список смежности графа :
//1 = > 3, 2, 4
//2 = > 3, 1
//3 = > 5, 2, 1
//4 = > 1
//5 = > 3
//1 2 3 4 5
//
//1.   0 1 1 1 0
//2.   1 0 1 0 0
//3.   1 1 0 0 1
//4.   1 0 0 0 0
//5.   0 0 1 0 0