#include <iostream>
#include <time.h>

using namespace std;

struct dn
{
	int d;
	dn* next;  // указатель на следующий адрес
	dn* pred; // указатель на предыдущий адрес
};

void print(dn* t) // функция печати списка
{ 
	cout << "Список: ";
	while (t != NULL)
	{
		cout << (*t).d << " ";

		t = (*t).next;
	};
	cout << endl;
}

void addE(dn* &pbeg, int N) //функия добавления в конец
{
	dn* add;
	dn* tmp = pbeg; // доходим до поледнего элемента 
	while ((*tmp).next != NULL)
	{
		tmp = (*tmp).next;
	}


	for (int i = 0; i < N - N / 2; i++) // добавление в конец
	{
		add = new dn;
		(*add).next = NULL;
		(*add).pred = NULL;
		(*add).d = rand() % 10 + 10;
		(*add).pred = tmp;
		tmp->next = add;
		tmp = add;
		print(pbeg);
	}

}


void addS(dn* &pbeg, int N) //функция добавления в начало
{
	dn* add;
	for (int i = 0; i < N / 2; i++)
	{
		add = new dn;
		(*add).next = NULL;
		(*add).pred = NULL;
		(*add).d = rand() % 10;
		(*add).next = pbeg; // следующее поле («правое поле») добавляемого элемента устанавливаем на первый элемент

		(*pbeg).pred = add;// связать первый элемент списка с вновь добавленным элементом, предыдущее поле («левое поле») первого элемента устанавливается на добавляемый узел

		pbeg = add; // сделать «add» первым эл-ом списка. Указатель начала списка(pbeg) устанавливается на добавленный («новый первый») элемент
		
		print(pbeg);
	}
}

void deleteS(dn* &pbeg, int K) //функция удаления с начала
{
	dn* ydw = pbeg;

	for (int i = 0; i < K; i++) 
	{
		if (pbeg != NULL) 
		{
			ydw = pbeg;
			pbeg = (*pbeg).next;
			if (pbeg != NULL)
			{
				(*pbeg).pred = NULL;
			}
			delete(ydw);
			print(pbeg);
		}
	}
}

void deleteE(dn*& pbeg, int K) //функция удаления с конца
{
	dn* ydw, * dop;

	for (int i = 0; i < K; i++)
	{
		dop = pbeg;// pbeg находится на первом элементе списка
		ydw = (*dop).next;
		while ((*ydw).next != NULL) //передвигаемся в конец
		{
			ydw = (*ydw).next;
			dop = (*dop).next;
		}

		(*ydw).next = NULL; // отсоединяем удаляемое поле
		(*ydw).pred = NULL;
		(*dop).next = NULL; //самое последнее поля зануляется

		delete(ydw);// удаляем
	}
}

void main()
{
	setlocale(LC_ALL, "RUS");
	srand(time(NULL));

	int N;
	cout << "Количество элементов: ";
	cin >> N;
	cout << endl;

	dn* pbeg; // указатель на первый элемент списка
	pbeg = NULL;

	pbeg = new dn;
	(*pbeg).next = NULL;
	(*pbeg).pred = NULL;
	(*pbeg).d = rand() % 10;
	print(pbeg); // печать списка
	N--;

	addS(pbeg, N); //вставка в начало

	addE(pbeg, N);//вставка в конец

	cout <<endl <<"Список заполнен." << endl;
	print(pbeg);

	int K;
	cout << endl<<"Количество удаляемых элементов: ";
	cin >> K;

	//deleteS(pbeg, K);//удаление с начала

	deleteE(pbeg, K);//удаление с конца

	cout << endl << "Список после удаления: " << endl;
	print(pbeg);

}

//Количество элементов : 8
//
//Список : 7
//Список : 6 7
//Список : 8 6 7
//Список : 5 8 6 7
//Список : 5 8 6 7 11
//Список : 5 8 6 7 11 13
//Список : 5 8 6 7 11 13 13
//Список : 5 8 6 7 11 13 13 13
//
//Список заполнен.
//Список : 5 8 6 7 11 13 13 13
//
//Количество удаляемых элементов : 3
//Список : 8 6 7 11 13 13 13
//Список : 6 7 11 13 13 13
//Список : 7 11 13 13 13
//
//Список после удаления :
//Список: 7 11 13 13 13

//Количество элементов : 10
//
//Список : 9
//Список : 5 9
//Список : 4 5 9
//Список : 0 4 5 9
//Список : 5 0 4 5 9
//Список : 5 0 4 5 9 17
//Список : 5 0 4 5 9 17 10
//Список : 5 0 4 5 9 17 10 19
//Список : 5 0 4 5 9 17 10 19 15
//Список : 5 0 4 5 9 17 10 19 15 11
//
//Список заполнен.
//Список : 5 0 4 5 9 17 10 19 15 11
//
//Количество удаляемых элементов : 9
//Список : 0 4 5 9 17 10 19 15 11
//Список : 4 5 9 17 10 19 15 11
//Список : 5 9 17 10 19 15 11
//Список : 9 17 10 19 15 11
//Список : 17 10 19 15 11
//Список : 10 19 15 11
//Список : 19 15 11
//Список : 15 11
//Список : 11
//
//Список после удаления :
//Список: 11

//Количество элементов : 20
//
//Список : 8
//Список : 9 8
//Список : 7 9 8
//Список : 8 7 9 8
//Список : 9 8 7 9 8
//Список : 2 9 8 7 9 8
//Список : 9 2 9 8 7 9 8
//Список : 6 9 2 9 8 7 9 8
//Список : 2 6 9 2 9 8 7 9 8
//Список : 7 2 6 9 2 9 8 7 9 8
//Список : 7 2 6 9 2 9 8 7 9 8 16
//Список : 7 2 6 9 2 9 8 7 9 8 16 19
//Список : 7 2 6 9 2 9 8 7 9 8 16 19 10
//Список : 7 2 6 9 2 9 8 7 9 8 16 19 10 15
//Список : 7 2 6 9 2 9 8 7 9 8 16 19 10 15 18
//Список : 7 2 6 9 2 9 8 7 9 8 16 19 10 15 18 10
//Список : 7 2 6 9 2 9 8 7 9 8 16 19 10 15 18 10 14
//Список : 7 2 6 9 2 9 8 7 9 8 16 19 10 15 18 10 14 17
//Список : 7 2 6 9 2 9 8 7 9 8 16 19 10 15 18 10 14 17 14
//Список : 7 2 6 9 2 9 8 7 9 8 16 19 10 15 18 10 14 17 14 10
//
//Список заполнен.
//Список : 7 2 6 9 2 9 8 7 9 8 16 19 10 15 18 10 14 17 14 10
//
//Количество удаляемых элементов : 21
//Список : 2 6 9 2 9 8 7 9 8 16 19 10 15 18 10 14 17 14 10
//Список : 6 9 2 9 8 7 9 8 16 19 10 15 18 10 14 17 14 10
//Список : 9 2 9 8 7 9 8 16 19 10 15 18 10 14 17 14 10
//Список : 2 9 8 7 9 8 16 19 10 15 18 10 14 17 14 10
//Список : 9 8 7 9 8 16 19 10 15 18 10 14 17 14 10
//Список : 8 7 9 8 16 19 10 15 18 10 14 17 14 10
//Список : 7 9 8 16 19 10 15 18 10 14 17 14 10
//Список : 9 8 16 19 10 15 18 10 14 17 14 10
//Список : 8 16 19 10 15 18 10 14 17 14 10
//Список : 16 19 10 15 18 10 14 17 14 10
//Список : 19 10 15 18 10 14 17 14 10
//Список : 10 15 18 10 14 17 14 10
//Список : 15 18 10 14 17 14 10
//Список : 18 10 14 17 14 10
//Список : 10 14 17 14 10
//Список : 14 17 14 10
//Список : 17 14 10
//Список : 14 10
//Список : 10
//Список :
//
//Список после удаления :
//Список:

//Количество элементов : 10
//
//Список : 9
//Список : 5 9
//Список : 0 5 9
//Список : 7 0 5 9
//Список : 0 7 0 5 9
//Список : 0 7 0 5 9 16
//Список : 0 7 0 5 9 16 14
//Список : 0 7 0 5 9 16 14 10
//Список : 0 7 0 5 9 16 14 10 16
//Список : 0 7 0 5 9 16 14 10 16 18
//
//Список заполнен.
//Список : 0 7 0 5 9 16 14 10 16 18
//
//Количество удаляемых элементов : 5
//Список : 7 0 5 9 16 14 10 16 18
//Список : 0 5 9 16 14 10 16 18
//Список : 5 9 16 14 10 16 18
//Список : 9 16 14 10 16 18
//Список : 16 14 10 16 18
//
//Список после удаления :
//Список: 16 14 10 16 18

//Количество элементов : 10
//
//Список : 4
//Список : 7 4
//Список : 4 7 4
//Список : 5 4 7 4
//Список : 8 5 4 7 4
//Список : 8 5 4 7 4 17
//Список : 8 5 4 7 4 17 18
//Список : 8 5 4 7 4 17 18 10
//Список : 8 5 4 7 4 17 18 10 11
//Список : 8 5 4 7 4 17 18 10 11 18
//
//Список заполнен.
//Список : 8 5 4 7 4 17 18 10 11 18
//
//Количество удаляемых элементов : 5
//
//Список после удаления :
//Список: 8 5 4 7 4

//Количество элементов : 15
//
//Список : 6
//Список : 9 6
//Список : 3 9 6
//Список : 6 3 9 6
//Список : 7 6 3 9 6
//Список : 9 7 6 3 9 6
//Список : 8 9 7 6 3 9 6
//Список : 7 8 9 7 6 3 9 6
//Список : 7 8 9 7 6 3 9 6 11
//Список : 7 8 9 7 6 3 9 6 11 17
//Список : 7 8 9 7 6 3 9 6 11 17 10
//Список : 7 8 9 7 6 3 9 6 11 17 10 12
//Список : 7 8 9 7 6 3 9 6 11 17 10 12 19
//Список : 7 8 9 7 6 3 9 6 11 17 10 12 19 19
//Список : 7 8 9 7 6 3 9 6 11 17 10 12 19 19 17
//
//Список заполнен.
//Список : 7 8 9 7 6 3 9 6 11 17 10 12 19 19 17
//
//Количество удаляемых элементов : 11
//
//Список после удаления :
//Список: 7 8 9 7
